generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Attribute {
  id        Int              @id @default(autoincrement())
  name      String
  type      AttributeType
  clientId  Int
  client    Client           @relation(fields: [clientId], references: [id])
  values    AttributeValue[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model AttributeValue {
  id          Int       @id @default(autoincrement())
  attributeId Int
  attribute   Attribute @relation(fields: [attributeId], references: [id])
  variantId   Int
  variant     Variant   @relation(fields: [variantId], references: [id])
  value       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Variant {
  id              Int           @id @default(autoincrement())
  clientRef       String?
  clientId        Int
  client          Client        @relation(fields: [clientId], references: [id])
  sku             String        @unique
  name            String
  description     String?
  label           String?
  imageUrl        String?
  productId       Int?
  product         Product?      @relation(fields: [productId], references: [id])
  categoryId      Int?
  category        Category?     @relation(fields: [categoryId], references: [id])
  stock           Int           @default(0)
  attributes      Json?
  customFields    Json?
  attributeValues AttributeValue[]
  status          ProductStatus @default(DRAFT) // ðŸ”¥ Afegit
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([clientRef, clientId])
}

model Product {
  id           Int           @id @default(autoincrement())
  clientRef    String?
  clientId     Int
  client       Client        @relation(fields: [clientId], references: [id])
  name         String
  description  String?
  label        String?
  imageUrl     String?
  tags         String?
  categoryId   Int?
  category     Category?     @relation(fields: [categoryId], references: [id])
  variants     Variant[]
  customFields Json?
  status       ProductStatus @default(DRAFT) // ðŸ”¥ Afegit
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([clientRef, clientId])
}

model Category {
  id           Int        @id @default(autoincrement())
  clientRef    String?
  clientId     Int
  client       Client     @relation(fields: [clientId], references: [id])
  name         String
  description  String?
  label        String?
  imageUrl     String?
  parentId     Int?
  parent       Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children     Category[] @relation("CategoryHierarchy")
  variants     Variant[]
  products     Product[]
  customFields Json?
  status       ProductStatus @default(DRAFT) // ðŸ”¥ Afegit
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([clientRef, clientId])
}

model Client {
  id         Int         @id @default(autoincrement())
  name       String
  attributes Attribute[]
  categories Category[]
  products   Product[]
  variants   Variant[]
}

model User {
  id        Int           @id @default(autoincrement())
  name      String
  email     String        @unique
  password  String
  logs      AuditLog[]
  histories ChangeHistory[]
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  action    String
  entity    String
  entityId  Int
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

enum AttributeType {
  TEXT_SHORT
  TEXT_LONG
  NUMBER
  BOOLEAN
  IMAGE
  FILE
  URL
  DATE
  SINGLE_SELECT
  MULTI_SELECT
  RELATION
}

enum ProductStatus {
  VISIBLE
  INVISIBLE
  DRAFT
}
model ChangeHistory {
  id          Int      @id @default(autoincrement())
  entity      String
  entityId    Int
  snapshot    Json
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
}
